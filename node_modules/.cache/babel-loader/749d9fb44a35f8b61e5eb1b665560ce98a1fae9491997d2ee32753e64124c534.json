{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\hooks\\\\src\\\\component\\\\useMemo.jsx\",\n  _s = $RefreshSig$();\n/*  \r\nهنا عندما نستخدم اي زر من الاثنين فانه ينفذ دالة\r\n حتى لو كنا نستخدم الزر الثاني و هذا يؤدي الى بطء في العملية is Even \r\n خصوصا لو كان لدينا كود كبير لذلك نستخدم use memo \r\n حيث انها تقوم بنفس عمل callback\r\n ولكن الفرق انها تستخدم مع القيم المرجعة من دالة \r\nتستخدم مع الدالة نفسها  call back \r\n*/\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LearnUseMemo = () => {\n  _s();\n  const [counterOne, setCounterOne] = useState(0);\n  const [counterTwo, setCounterTwo] = useState(0);\n  const handleCountOne = () => {\n    setCounterOne(counterOne + 1);\n  };\n  const handleCountTwo = () => {\n    setCounterTwo(counterTwo + 1);\n  };\n  let isEven = () => {\n    let i = 0;\n    while (i < 20000000) i++;\n    /* هذا السطر لا يؤثر على عملية الريتيرن ولكن الهدف منه اطالة زمن تنفيذ هذه الدالة  */\n    return counterOne % 2 === 0;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCountOne,\n      children: [\"counter one - \", counterOne]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: isEven() ? \"Even\" : \"Odd\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCountTwo,\n      children: [\"counter two - \", counterTwo]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(LearnUseMemo, \"mpobYL1SC3vPDUcy0/LMcqDYuUE=\");\n_c = LearnUseMemo;\nexport default LearnUseMemo;\nvar _c;\n$RefreshReg$(_c, \"LearnUseMemo\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","LearnUseMemo","_s","counterOne","setCounterOne","counterTwo","setCounterTwo","handleCountOne","handleCountTwo","isEven","i","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/react/hooks/src/component/useMemo.jsx"],"sourcesContent":["/*  \r\nهنا عندما نستخدم اي زر من الاثنين فانه ينفذ دالة\r\n حتى لو كنا نستخدم الزر الثاني و هذا يؤدي الى بطء في العملية is Even \r\n خصوصا لو كان لدينا كود كبير لذلك نستخدم use memo \r\n حيث انها تقوم بنفس عمل callback\r\n ولكن الفرق انها تستخدم مع القيم المرجعة من دالة \r\nتستخدم مع الدالة نفسها  call back \r\n*/\r\nimport React, { useState } from \"react\";\r\n\r\nconst LearnUseMemo = () => {\r\n  const [counterOne, setCounterOne] = useState(0);\r\n  const [counterTwo, setCounterTwo] = useState(0);\r\n\r\n  const handleCountOne = () => {\r\n    setCounterOne(counterOne + 1);\r\n  };\r\n\r\n  const handleCountTwo = () => {\r\n    setCounterTwo(counterTwo + 1);\r\n  };\r\n  let isEven = () => {\r\n    let i = 0;\r\n    while (i < 20000000) i++;\r\n    /* هذا السطر لا يؤثر على عملية الريتيرن ولكن الهدف منه اطالة زمن تنفيذ هذه الدالة  */\r\n    return counterOne % 2 === 0;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleCountOne}>counter one - {counterOne}</button>\r\n      <span>{isEven() ? \"Even\" : \"Odd\"}</span>\r\n      <br />\r\n      <button onClick={handleCountTwo}>counter two - {counterTwo}</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LearnUseMemo;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACO,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EAE/C,MAAMS,cAAc,GAAGA,CAAA,KAAM;IAC3BH,aAAa,CAACD,UAAU,GAAG,CAAC,CAAC;EAC/B,CAAC;EAED,MAAMK,cAAc,GAAGA,CAAA,KAAM;IAC3BF,aAAa,CAACD,UAAU,GAAG,CAAC,CAAC;EAC/B,CAAC;EACD,IAAII,MAAM,GAAGA,CAAA,KAAM;IACjB,IAAIC,CAAC,GAAG,CAAC;IACT,OAAOA,CAAC,GAAG,QAAQ,EAAEA,CAAC,EAAE;IACxB;IACA,OAAOP,UAAU,GAAG,CAAC,KAAK,CAAC;EAC7B,CAAC;EAED,oBACEH,OAAA;IAAAW,QAAA,gBACEX,OAAA;MAAQY,OAAO,EAAEL,cAAe;MAAAI,QAAA,GAAC,gBAAc,EAACR,UAAU;IAAA;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC,eACpEhB,OAAA;MAAAW,QAAA,EAAOF,MAAM,CAAC,CAAC,GAAG,MAAM,GAAG;IAAK;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eACxChB,OAAA;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACNhB,OAAA;MAAQY,OAAO,EAAEJ,cAAe;MAAAG,QAAA,GAAC,gBAAc,EAACN,UAAU;IAAA;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjE,CAAC;AAEV,CAAC;AAACd,EAAA,CA1BID,YAAY;AAAAgB,EAAA,GAAZhB,YAAY;AA4BlB,eAAeA,YAAY;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}